import { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';
import { json, getSystemPath, normalize } from '@angular-devkit/core';
import { of, Observable, bindNodeCallback } from 'rxjs';
import { map, tap, catchError } from 'rxjs/operators';
import { writeFile, writeFileSync } from 'fs';
import { dedent } from 'ts-lint/lib/utils';

// const commandLineArgs = require('command-line-args');

// const optionDef = [
//   { name: 'path', alias: 'p', type: String }
// ];
const util = require('util');
const exec = util.promisify(require('child_process').exec);
// const options = commandLineArgs(optionDef);

export interface CommitBuilderSchema {
    // purposely left empty for future extension
}

function runBuilder(
    _schema: CommitBuilderSchema,
    context: BuilderContext
): Observable<BuilderOutput> {

    createVersionsFile(`${getSystemPath(normalize(context.workspaceRoot))}/src/environments/versions.ts`);
    // const filename = `${getSystemPath(normalize(context.workspaceRoot))}/src/app/app.component.ts`;
    // const writeFileObservable = bindNodeCallback(writeFile);
    // const logger = context.logger.createChild('CommitBuilder');
    
    // return writeFileObservable(filename, 'test data').pipe(
    //     map(() => ({ success: true })),
    //     tap(() => logger.info('versions file created')),
    //     catchError(e => {
    //         logger.error('Failed to create versions file', e);
    //         return of({ success: false });
    //     })
    // );

    return of({ success: true });
}

async function createVersionsFile(path: string) {
    const revision = (await exec('git rev-parse --short HEAD')).stdout.toString().trim();
    const branch = (await exec('git rev-parse --abbrev-ref HEAD')).stdout.toString().trim();
  
    console.log(`version: '${process.env.npm_package_version}', revision: '${revision}', branch: '${branch}'`);
  
    const content = dedent`
        // this file is automatically generated by git.version.ts script
        export const versions = {
          version: '${process.env.npm_package_version}',
          revision: '${revision}',
          branch: '${branch}'
        };`;
  
    writeFileSync(path, content, {encoding: 'utf8'});
  }

export default createBuilder<json.JsonObject & CommitBuilderSchema>(runBuilder);
