"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const fs_1 = require("fs");
const utils_1 = require("ts-lint/lib/utils");
// const commandLineArgs = require('command-line-args');
// const optionDef = [
//   { name: 'path', alias: 'p', type: String }
// ];
const util = require('util');
const exec = util.promisify(require('child_process').exec);
function runBuilder(_schema, context) {
    createVersionsFile(`${core_1.getSystemPath(core_1.normalize(context.workspaceRoot))}/src/environments/versions.ts`);
    // const filename = `${getSystemPath(normalize(context.workspaceRoot))}/src/app/app.component.ts`;
    // const writeFileObservable = bindNodeCallback(writeFile);
    // const logger = context.logger.createChild('CommitBuilder');
    // return writeFileObservable(filename, 'test data').pipe(
    //     map(() => ({ success: true })),
    //     tap(() => logger.info('versions file created')),
    //     catchError(e => {
    //         logger.error('Failed to create versions file', e);
    //         return of({ success: false });
    //     })
    // );
    return rxjs_1.of({ success: true });
}
function createVersionsFile(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const revision = (yield exec('git rev-parse --short HEAD')).stdout.toString().trim();
        const branch = (yield exec('git rev-parse --abbrev-ref HEAD')).stdout.toString().trim();
        console.log(`version: '${process.env.npm_package_version}', revision: '${revision}', branch: '${branch}'`);
        const content = utils_1.dedent `
        // this file is automatically generated by git.version.ts script
        export const versions = {
          version: '${process.env.npm_package_version}',
          revision: '${revision}',
          branch: '${branch}'
        };`;
        fs_1.writeFileSync(path, content, { encoding: 'utf8' });
    });
}
exports.default = architect_1.createBuilder(runBuilder);
//# sourceMappingURL=index.js.map